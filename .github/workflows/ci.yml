name: 'CI'
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: "0 4 * * *"

jobs:
  pip-pre:
    name: ubuntu-latest / Python3.9 / ${{ matrix.qt }} / pyvista-main / qtpy-master
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        qt: ['PySide2', 'PySide6', 'PyQt5', 'PyQt6']
    defaults:
      run:
        shell: bash
    env:
      ALLOW_PLOTTING: 'true'
      DISPLAY: ':99'
      PYTHON_VERSION: '3.9'
    steps:
      - uses: actions/checkout@v2
      - run: .ci/setup_headless_display.sh
        name: 'Setup xvfb'
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        name: 'Setup python'
      - run: |
          python -m pip install --upgrade pip wheel
          pip install --progress-bar off https://github.com/pyvista/pyvista/zipball/main
          pip install --progress-bar off https://github.com/spyder-ide/qtpy/zipball/master
          pip install --upgrade -r requirements_test.txt
        name: 'Install dependencies with pip'
      - run: pip install ${{ matrix.qt }}
        name: 'Install Qt binding'
      - run: |
          pip install -e .
          python -c "import pyvista; print(pyvista.Report())"
        name: 'Install pyvistaqt'
      - run: python pyvistaqt/rwi.py
        name: 'Run QVTKRenderWidgetConeExample'
      - run: pytest -v --cov pyvistaqt --cov-report html
        name: 'Run Tests'
      - uses: codecov/codecov-action@v2
        if: success()
        name: 'Upload coverage to CodeCov'

  pip:
    name: ${{ matrix.os }} / pip / PyQt5 / pyvista-${{ matrix.pyvista }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        pyvista: ['0.32', '0.33']
    defaults:
      run:
        shell: bash
    env:
      ALLOW_PLOTTING: 'true'
      DISPLAY: ':99'
      PYTHON_VERSION: '3.9'
    steps:
      - uses: actions/checkout@v2
      - run: .ci/setup_headless_display.sh
        name: 'Setup xvfb'
        if: matrix.os == 'ubuntu-latest'
      - run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          ./gl-ci-helpers/appveyor/install_opengl.ps1
        shell: pwsh
        name: 'Setup opengl'
        if: matrix.os == 'windows-latest'
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
        name: 'Setup python'
      - run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements_test.txt
        name: 'Install dependencies with pip'
      - run: pip install PyQt5
        name: 'Install Qt binding'
      - run: pip install --upgrade "pyvista==${{ matrix.pyvista }}.*"
        name: 'Install PyVista'
      - run: |
          pip install -e .
          python -c "import pyvista; print(pyvista.Report())"
        name: 'Install pyvistaqt'
      - run: pytest -v --cov pyvistaqt --cov-report html
        name: 'Run Tests'
      - uses: codecov/codecov-action@v2
        if: success()
        name: 'Upload coverage to CodeCov'

  conda:
    name: ${{ matrix.os }} / conda / ${{ matrix.qt }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        qt: ['PyQt5']
    defaults:
      run:
        shell: bash
    env:
      ALLOW_PLOTTING: 'true'
      DISPLAY: ':99'
      CONDA_ENV: 'environment.yml'
      PYTHON_VERSION: '3.8'
    steps:
      - uses: actions/checkout@v2
      - run: .ci/setup_headless_display.sh
        name: 'Setup xvfb'
        if: matrix.os == 'ubuntu-latest'
      - run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          ./gl-ci-helpers/appveyor/install_opengl.ps1
        shell: pwsh
        name: 'Setup opengl'
        if: matrix.os == 'windows-latest'
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: 'pyvistaqt-env'
          python-version: ${{ env.PYTHON_VERSION }}
          environment-file: ${{ env.CONDA_ENV }}
        name: 'Setup conda'
      - shell: bash -el {0}
        run: pip install ${{ matrix.qt }}
        name: 'Install Qt binding'
      - shell: bash -el {0}
        run: |
          pip install -e .
          python -c "import pyvista; print(pyvista.Report())"
        name: 'Install pyvistaqt'
      - shell: bash -el {0}
        run: pytest -v --cov pyvistaqt --cov-report html
        name: 'Run Tests'
      - uses: codecov/codecov-action@v2
        if: success()
        name: 'Upload coverage to CodeCov'
